AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DBClusterName:
    Description: 'The cluster name where the parameters will be stored. '
    Type: String
    Default: optuna-parameter
  DatabaseName:
    Description: 'The database name where the parameters will be stored. '
    Type: String
    Default: optuna
    AllowedPattern: '([a-z]|[0-9])+'
  DBEngine:
    Type: String
    Default: aurora
    AllowedValues:
      - aurora        # compatible with MySQL 5.6
      - aurora-mysql  # compatible with MySQL 5.7
      - aurora-postgresql
  DBInstanceType:
    Description: 'The type of RDS/Aurora instance to be provisioned. '
    Type: String
    Default: db.r4.large
    AllowedValues:
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
  DBPort:
    Description: 'The RDS/Aurora port.'
    Type: Number
    Default: 3306
  SageMakerInstanceName:
    Description: 'Name for the SageMaker notebook. '
    Default: optuna-notebook
    Type: String
  SageMakerInstanceType:
    Description: 'The type of SageMaker notebook to be provisioned. '
    Type: String
    Default: ml.t2.medium
    AllowedValues:
      - ml.t2.medium
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
      - ml.m5.12xlarge
      - ml.m5.24xlarge
      - ml.p2.xlarge
      - ml.p2.8xlarge
      - ml.p2.16xlarge
      - ml.p3.2xlarge
      - ml.p3.8xlarge
      - ml.p3.16xlarge
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: optuna
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.3.0/24
Mappings:
  DBParameterGroupMap:
    aurora:
      DefaultParameterGroup: 'aurora5.6'
    aurora-mysql:
      DefaultParameterGroup: 'aurora-mysql5.7'
    aurora-postgresql:
      DefaultParameterGroup: 'aurora-postgresql10'
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c1a5d4cc-4190-4626-be0d-762be49d9c9a
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 808edaed-a4f6-4639-98a5-86f3bee3f098
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7226ab70-1a75-436d-8026-d4f0823f53ae
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b74ea2a6-4268-454a-b4d0-3bd8b25167cf
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8503e480-d914-44f2-8496-bb0caea8a005
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6d674816-f2f5-45e7-9fd5-c19172d2b6ab
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 23ac1c7a-cca4-47e7-8a36-3ba569021a9b
  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4f1d2eb5-49c8-49c7-b73f-1c90b3527bb8
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c2aeac7b-a7e6-4c22-8432-8ecf5f127fd7
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8e918ca7-09f8-4f01-8a5d-83e36a1a59c6
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f0fedb98-5668-45b4-8ead-0b198c83e144
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cb0e8e43-63ee-4d9f-85b2-b9230a80ec71
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2d6d9c30-6a21-45e3-b389-017fef79b9e4
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 571f66e3-7339-4ebb-b1f3-55132a6fad37
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0a3faf8b-f015-46e8-a946-2adddb2143a7
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a8b85010-3ecd-4e15-af79-55dc436161b1
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3ab988d4-6a4c-427a-8143-ff3ae13570e2
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ca4f40df-d867-4a44-ac10-edca2e955bab
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ2)'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 397aad10-d3b2-4fa1-8e6a-f3b5ff06f6b8
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 26f49dc0-7d0f-4de0-a98f-4a585f9b5e87
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a3f7896e-c62e-4ca9-ba10-0fbe25922957
  PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId:
           Ref: VPC
  PublicIngressACLHTTPEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '100'
         Protocol: "6"
         RuleAction: allow
         Egress: 'false'
         CidrBlock: 0.0.0.0/0
         PortRange:
            From: '80'
            To: '80'
  PublicIngressACLHTTPSEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '110'
         Protocol: "6"
         RuleAction: allow
         Egress: 'false'
         CidrBlock: 0.0.0.0/0
         PortRange:
            From: '443'
            To: '443'
  PublicIngressACLDeny:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '999'
         Protocol: "-1"
         RuleAction: deny
         Egress: 'false'
         CidrBlock: 0.0.0.0/0
  PublicEgressACLHTTPEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '100'
         Protocol: "6"
         RuleAction: allow
         Egress: 'true'
         CidrBlock: 0.0.0.0/0
         PortRange:
            From: '80'
            To: '80'
  PublicEgressACLHTTPSEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '110'
         Protocol: "6"
         RuleAction: allow
         Egress: 'true'
         CidrBlock: 0.0.0.0/0
         PortRange:
            From: '443'
            To: '443'
  PublicEgressACLDB1Entry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '120'
         Protocol: "6"
         RuleAction: allow
         Egress: 'true'
         CidrBlock: !Ref PrivateSubnet1CIDR
         PortRange:
            From: !Ref DBPort
            To: !Ref DBPort
  PublicEgressACLDB2Entry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '130'
         Protocol: "6"
         RuleAction: allow
         Egress: 'true'
         CidrBlock: !Ref PrivateSubnet2CIDR
         PortRange:
            From: !Ref DBPort
            To: !Ref DBPort
  PublicEgressACLDeny:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:
            Ref: PublicNACL
         RuleNumber: '999'
         Protocol: "-1"
         RuleAction: deny
         Egress: 'true'
         CidrBlock: 0.0.0.0/0
  PublicSubnet1NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PublicSubnet1
       NetworkAclId:
         Ref: PublicNACL
  PublicSubnet2NetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PublicSubnet2
       NetworkAclId:
         Ref: PublicNACL
  DBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: !Ref DBEngine
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DatabaseName: !Ref DatabaseName
      DBClusterIdentifier: !Ref DBClusterName
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
      Port: !Ref DBPort
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d6d32d98-5b8d-4f96-a3f6-d653dd66336b
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: !Ref DBEngine
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBParameterGroupName: !Ref DBParameterGroup
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: >-
        Private subnets for an Optuna parameter db cluster.
      DBSubnetGroupName: parameter-db-subnet
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: DB Cluster Parameter Group for Aurora Cluster
      Family: !FindInMap
        - DBParameterGroupMap
        - !Ref DBEngine
        - DefaultParameterGroup
      Parameters:
        time_zone: Asia/Tokyo
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: DB Parameter Group for Aurora
      Family: !FindInMap
        - DBParameterGroupMap
        - !Ref DBEngine
        - DefaultParameterGroup
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RDS security group
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SageMakerSecurityGroup
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          IpProtocol: tcp
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: acb5eaa4-ba49-4e03-ab14-0ec9e6c4dc72
  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'demo/optuna/db'
      Description: 'This is the secret for your RDS/Aurora instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\{}'
  NotebookInstance:
    Type: 'AWS::SageMaker::NotebookInstance'
    Properties:
      InstanceType: !Ref SageMakerInstanceType
      NotebookInstanceName: !Ref SageMakerInstanceName
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      DirectInternetAccess: Enabled
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SageMakerSecurityGroup
      LifecycleConfigName: !GetAtt NotebookLifecycleConfig.NotebookInstanceLifecycleConfigName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c90fd14b-d872-4e50-a56f-8675da88eeb2
  SageMakerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SageMaker Notebook instance / Training contianer security group
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2160a120-8184-4562-bccd-aafa12f2add5
  NotebookExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: get-rds-credentials
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f2c809d6-38e4-4bd5-9c87-a7f57b316daf
  NotebookLifecycleConfig:
    Type: 'AWS::SageMaker::NotebookInstanceLifecycleConfig'
    Properties:
      NotebookInstanceLifecycleConfigName: clone-optuna-sample-repository
      OnCreate:
        - Content: IyEvYmluL2Jhc2gKc3VkbyAtdSBlYzItdXNlciAtaSA8PCdFT0YnCmNkIFNhZ2VNYWtlciAmJiBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2F3cy1zYW1wbGVzL2FtYXpvbi1zYWdlbWFrZXItb3B0dW5hLWhwby1ibG9nLmdpdApFT0Y=
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
  SageMakerSecurityGroup:
    Description: Security group for SageMaker Notebook instance / Training contianer
    Value: !Ref SageMakerSecurityGroup
  ClusterEndpoint:
    Description: Cluster endpoint
    Value: !Sub '${DBCluster.Endpoint.Address}:${DBCluster.Endpoint.Port}'
  ClusterName:
    Description: Name of cluster
    Value: !Ref DBCluster
  DBSecretArn:
    Description: AWS Secrets Manager secret name for RDS/Aurora
    Value: !Ref DBSecret
  DatabaseName:
    Description: Database name in RDS/Aurora
    Value: !Ref DatabaseName
